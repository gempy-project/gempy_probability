
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples_basic_geology/2-thickness_problem_gempy.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_basic_geology_2-thickness_problem_gempy.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_basic_geology_2-thickness_problem_gempy.py:


2.2 - Including GemPy
=====================

Complex probabilistic model
---------------------------

.. GENERATED FROM PYTHON SOURCE LINES 8-25

.. code-block:: python3


    import os
    import numpy as np
    import matplotlib.pyplot as plt
    import torch
    import pyro
    import pyro.distributions as dist
    from pyro.infer import MCMC, NUTS, Predictive
    from pyro.infer.autoguide import init_to_mean
    import gempy as gp
    import gempy_engine
    import gempy_viewer as gpv
    from gempy_engine.core.backend_tensor import BackendTensor
    import arviz as az
    from gempy_probability.plot_posterior import default_red, default_blue
    # sphinx_gallery_thumbnail_number = -1








.. GENERATED FROM PYTHON SOURCE LINES 26-27

Set the data path

.. GENERATED FROM PYTHON SOURCE LINES 27-30

.. code-block:: python3

    data_path = os.path.abspath('../')









.. GENERATED FROM PYTHON SOURCE LINES 31-32

Define a function for plotting geological settings with wells

.. GENERATED FROM PYTHON SOURCE LINES 32-58

.. code-block:: python3

    def plot_geo_setting_well(geo_model):
        """
        This function plots the geological settings along with the well locations.
        It uses gempy_viewer to create 2D plots of the model.
        """
        # Define well and device locations
        device_loc = np.array([[6e3, 0, 3700]])
        well_1 = 3.41e3
        well_2 = 3.6e3

        # Create a 2D plot
        p2d = gpv.plot_2d(geo_model, show_topography=False, legend=False, show=False)

        # Add well and device markers to the plot
        p2d.axes[0].scatter([3e3], [well_1], marker='^', s=400, c='#71a4b3', zorder=10)
        p2d.axes[0].scatter([9e3], [well_2], marker='^', s=400, c='#71a4b3', zorder=10)
        p2d.axes[0].scatter(device_loc[:, 0], device_loc[:, 2], marker='x', s=400, c='#DA8886', zorder=10)

        # Add vertical lines to represent wells
        p2d.axes[0].vlines(3e3, .5e3, well_1, linewidth=4, color='gray')
        p2d.axes[0].vlines(9e3, .5e3, well_2, linewidth=4, color='gray')

        # Show the plot
        p2d.fig.show()









.. GENERATED FROM PYTHON SOURCE LINES 59-63

Creating the Geological Model
-----------------------------
Here we create a geological model using GemPy. The model defines the spatial extent,
resolution, and geological information derived from orientations and surface points data.

.. GENERATED FROM PYTHON SOURCE LINES 63-75

.. code-block:: python3


    geo_model = gp.create_geomodel(
        project_name='Wells',
        extent=[0, 12000, -500, 500, 0, 4000],
        refinement=3,
        importer_helper=gp.data.ImporterHelper(
            path_to_orientations=data_path + "/data/2-layers/2-layers_orientations.csv",
            path_to_surface_points=data_path + "/data/2-layers/2-layers_surface_points.csv"
        )
    )









.. GENERATED FROM PYTHON SOURCE LINES 76-80

Configuring the Model
---------------------
We configure the interpolation options for the geological model. 
These options determine how the model interpolates between data points.

.. GENERATED FROM PYTHON SOURCE LINES 80-85

.. code-block:: python3


    geo_model.interpolation_options.uni_degree = 0
    geo_model.interpolation_options.mesh_extraction = False
    geo_model.interpolation_options.sigmoid_slope = 1100.








.. GENERATED FROM PYTHON SOURCE LINES 86-90

Setting up a Custom Grid
------------------------
A custom grid is set for the model, defining specific points in space
where geological formations will be evaluated.

.. GENERATED FROM PYTHON SOURCE LINES 90-97

.. code-block:: python3


    x_loc = 6000
    y_loc = 0
    z_loc = np.linspace(0, 4000, 100)
    xyz_coord = np.array([[x_loc, y_loc, z] for z in z_loc])
    gp.set_custom_grid(geo_model.grid, xyz_coord=xyz_coord)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Active grids: ['custom']

    <gempy.core.data.grid_modules.grid_types.CustomGrid object at 0x7f1e8c23f430>



.. GENERATED FROM PYTHON SOURCE LINES 98-102

Plotting the Initial Geological Setting
---------------------------------------
Before running any probabilistic analysis, we first visualize the initial geological setting.
This step ensures that our model is correctly set up with the initial data.

.. GENERATED FROM PYTHON SOURCE LINES 102-107

.. code-block:: python3


    # Plot initial geological settings
    plot_geo_setting_well(geo_model=geo_model)





.. image-sg:: /examples_basic_geology/images/sphx_glr_2-thickness_problem_gempy_001.png
   :alt: Cell Number: mid Direction: y
   :srcset: /examples_basic_geology/images/sphx_glr_2-thickness_problem_gempy_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 108-112

Interpolating the Initial Guess
-------------------------------
The model interpolates an initial guess for the geological formations.
This step is crucial to provide a starting point for further probabilistic analysis.

.. GENERATED FROM PYTHON SOURCE LINES 112-120

.. code-block:: python3


    gp.compute_model(
        gempy_model=geo_model,
        engine_config=gp.data.GemPyEngineConfig(backend=gp.data.AvailableBackends.numpy)
    )
    plot_geo_setting_well(geo_model=geo_model)





.. image-sg:: /examples_basic_geology/images/sphx_glr_2-thickness_problem_gempy_002.png
   :alt: Cell Number: mid Direction: y
   :srcset: /examples_basic_geology/images/sphx_glr_2-thickness_problem_gempy_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Setting Backend To: AvailableBackends.numpy
    /home/leguark/gempy/gempy/core/data/geo_model.py:164: UserWarning: You are using refinement and passing a regular grid. The resolution of the regular grid will be overwritten
      warnings.warn(
    A size: (5, 5)
    CG iterations: 5




.. GENERATED FROM PYTHON SOURCE LINES 121-126

Probabilistic Geomodeling with Pyro
-----------------------------------
In this section, we introduce a probabilistic approach to geological modeling.
By using Pyro, a probabilistic programming language, we define a model that integrates
geological data with uncertainty quantification.

.. GENERATED FROM PYTHON SOURCE LINES 126-132

.. code-block:: python3


    sp_coords_copy = geo_model.interpolation_input.surface_points.sp_coords.copy()
    # Change the backend to PyTorch for probabilistic modeling
    BackendTensor.change_backend_gempy(engine_backend=gp.data.AvailableBackends.PYTORCH)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Setting Backend To: AvailableBackends.PYTORCH




.. GENERATED FROM PYTHON SOURCE LINES 133-138

Defining the Probabilistic Model
--------------------------------
The Pyro model represents the probabilistic aspects of the geological model.
It defines a prior distribution for the top layer's location and computes the thickness
of the geological layer as an observed variable.

.. GENERATED FROM PYTHON SOURCE LINES 138-172

.. code-block:: python3


    def model(y_obs_list):
        """
        This Pyro model represents the probabilistic aspects of the geological model.
        It defines a prior distribution for the top layer's location and 
        computes the thickness of the geological layer as an observed variable.
        """
        # Define prior for the top layer's location
        prior_mean = sp_coords_copy[0, 2]
        mu_top = pyro.sample(r'$\mu_{top}$', dist.Normal(prior_mean, torch.tensor(0.02, dtype=torch.float64)))

        # Update the model with the new top layer's location
        interpolation_input = geo_model.interpolation_input
        interpolation_input.surface_points.sp_coords = torch.index_put(
            interpolation_input.surface_points.sp_coords,
            (torch.tensor([0]), torch.tensor([2])),
            mu_top
        )

        # Compute the geological model
        geo_model.solutions = gempy_engine.compute_model(
            interpolation_input=interpolation_input,
            options=geo_model.interpolation_options,
            data_descriptor=geo_model.input_data_descriptor,
            geophysics_input=geo_model.geophysics_input,
        )

        # Compute and observe the thickness of the geological layer
        simulated_well = geo_model.solutions.octrees_output[0].last_output_center.custom_grid_values
        thickness = simulated_well.sum()
        pyro.deterministic(r'$\mu_{thickness}$', thickness.detach())
        y_thickness = pyro.sample(r'$y_{thickness}$', dist.Normal(thickness, 50), obs=y_obs_list)









.. GENERATED FROM PYTHON SOURCE LINES 173-177

Running Prior Sampling and Visualization
----------------------------------------
Prior sampling is an essential step in probabilistic modeling. 
It helps in understanding the distribution of our prior assumptions before observing any data.

.. GENERATED FROM PYTHON SOURCE LINES 179-180

Prepare observation data

.. GENERATED FROM PYTHON SOURCE LINES 180-182

.. code-block:: python3

    y_obs_list = torch.tensor([200, 210, 190])








.. GENERATED FROM PYTHON SOURCE LINES 183-184

Run prior sampling and visualization

.. GENERATED FROM PYTHON SOURCE LINES 184-189

.. code-block:: python3

    prior = Predictive(model, num_samples=50)(y_obs_list)
    data = az.from_pyro(prior=prior)
    az.plot_trace(data.prior)
    plt.show()




.. image-sg:: /examples_basic_geology/images/sphx_glr_2-thickness_problem_gempy_003.png
   :alt: $\mu_{top}$, $\mu_{top}$, $\mu_{thickness}$, $\mu_{thickness}$, $y_{thickness}$, $y_{thickness}$
   :srcset: /examples_basic_geology/images/sphx_glr_2-thickness_problem_gempy_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/leguark/.virtualenvs/gempy-geotop-pilot/lib/python3.10/site-packages/pkg_resources/__init__.py:123: PkgResourcesDeprecationWarning: gempy.-version- is an invalid version and will not be supported in a future release
      warnings.warn(




.. GENERATED FROM PYTHON SOURCE LINES 190-195

Sampling from the Posterior using MCMC
--------------------------------------
We use Markov Chain Monte Carlo (MCMC) with the NUTS (No-U-Turn Sampler) algorithm 
to sample from the posterior distribution. This gives us an understanding of the 
distribution of our model parameters after considering the observed data.

.. GENERATED FROM PYTHON SOURCE LINES 197-198

Run MCMC using NUTS to sample from the posterior

.. GENERATED FROM PYTHON SOURCE LINES 198-203

.. code-block:: python3

    pyro.primitives.enable_validation(is_validate=True)
    nuts_kernel = NUTS(model, step_size=0.0085, adapt_step_size=True, target_accept_prob=0.9, max_tree_depth=10, init_strategy=init_to_mean)
    mcmc = MCMC(nuts_kernel, num_samples=200, warmup_steps=50, disable_validation=False)
    mcmc.run(y_obs_list)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Warmup:   0%|          | 0/250 [00:00, ?it/s]    Warmup:   0%|          | 1/250 [00:00,  2.84it/s, step size=1.35e-01, acc. prob=0.010]    Warmup:   1%|1         | 3/250 [00:00,  6.26it/s, step size=6.02e-03, acc. prob=0.309]    Warmup:   2%|2         | 5/250 [00:00,  6.14it/s, step size=5.30e-03, acc. prob=0.574]    Warmup:   2%|2         | 6/250 [00:01,  6.02it/s, step size=6.30e-03, acc. prob=0.645]    Warmup:   3%|2         | 7/250 [00:01,  6.22it/s, step size=7.16e-03, acc. prob=0.691]    Warmup:   3%|3         | 8/250 [00:01,  6.25it/s, step size=8.77e-03, acc. prob=0.727]    Warmup:   4%|3         | 9/250 [00:01,  6.82it/s, step size=1.05e-02, acc. prob=0.753]    Warmup:   4%|4         | 10/250 [00:01,  6.59it/s, step size=1.43e-02, acc. prob=0.778]    Warmup:   5%|4         | 12/250 [00:01,  7.38it/s, step size=1.72e-02, acc. prob=0.803]    Warmup:   6%|5         | 14/250 [00:01,  9.19it/s, step size=1.74e-02, acc. prob=0.816]    Warmup:   7%|6         | 17/250 [00:02, 10.45it/s, step size=1.69e-02, acc. prob=0.829]    Warmup:   8%|8         | 20/250 [00:02, 13.55it/s, step size=5.65e-03, acc. prob=0.820]    Warmup:   9%|8         | 22/250 [00:02,  9.48it/s, step size=1.07e-02, acc. prob=0.836]    Warmup:  10%|9         | 24/250 [00:02,  9.22it/s, step size=1.25e-02, acc. prob=0.842]    Warmup:  10%|#         | 26/250 [00:03, 10.45it/s, step size=9.26e-03, acc. prob=0.842]    Warmup:  11%|#1        | 28/250 [00:03,  9.81it/s, step size=1.02e-02, acc. prob=0.846]    Warmup:  12%|#2        | 30/250 [00:03,  9.96it/s, step size=1.89e-02, acc. prob=0.856]    Warmup:  13%|#3        | 33/250 [00:03, 12.93it/s, step size=1.49e-02, acc. prob=0.857]    Warmup:  14%|#4        | 35/250 [00:03, 12.32it/s, step size=1.42e-02, acc. prob=0.858]    Warmup:  15%|#4        | 37/250 [00:03, 13.73it/s, step size=2.41e-02, acc. prob=0.865]    Warmup:  16%|#6        | 40/250 [00:04, 10.50it/s, step size=3.88e-03, acc. prob=0.849]    Warmup:  17%|#6        | 42/250 [00:05,  5.97it/s, step size=5.65e-03, acc. prob=0.854]    Warmup:  18%|#7        | 44/250 [00:05,  4.62it/s, step size=1.24e+00, acc. prob=0.861]    Warmup:  19%|#9        | 48/250 [00:05,  7.31it/s, step size=5.45e-01, acc. prob=0.841]    Warmup:  20%|##        | 50/250 [00:06,  7.97it/s, step size=1.17e+00, acc. prob=0.847]    Sample:  21%|##1       | 53/250 [00:06, 10.34it/s, step size=1.17e+00, acc. prob=0.928]    Sample:  22%|##2       | 55/250 [00:06, 11.67it/s, step size=1.17e+00, acc. prob=0.942]    Sample:  23%|##2       | 57/250 [00:06, 11.96it/s, step size=1.17e+00, acc. prob=0.934]    Sample:  24%|##3       | 59/250 [00:06, 12.72it/s, step size=1.17e+00, acc. prob=0.905]    Sample:  24%|##4       | 61/250 [00:06, 13.37it/s, step size=1.17e+00, acc. prob=0.893]    Sample:  25%|##5       | 63/250 [00:06, 13.43it/s, step size=1.17e+00, acc. prob=0.906]    Sample:  26%|##6       | 66/250 [00:07, 14.80it/s, step size=1.17e+00, acc. prob=0.882]    Sample:  28%|##7       | 69/250 [00:07, 17.37it/s, step size=1.17e+00, acc. prob=0.855]    Sample:  28%|##8       | 71/250 [00:07, 15.88it/s, step size=1.17e+00, acc. prob=0.857]    Sample:  30%|##9       | 74/250 [00:07, 16.31it/s, step size=1.17e+00, acc. prob=0.855]    Sample:  30%|###       | 76/250 [00:07, 15.91it/s, step size=1.17e+00, acc. prob=0.859]    Sample:  32%|###1      | 79/250 [00:07, 18.37it/s, step size=1.17e+00, acc. prob=0.858]    Sample:  32%|###2      | 81/250 [00:07, 16.79it/s, step size=1.17e+00, acc. prob=0.866]    Sample:  34%|###3      | 84/250 [00:08, 18.80it/s, step size=1.17e+00, acc. prob=0.870]    Sample:  35%|###4      | 87/250 [00:08, 19.13it/s, step size=1.17e+00, acc. prob=0.872]    Sample:  36%|###6      | 90/250 [00:08, 20.44it/s, step size=1.17e+00, acc. prob=0.869]    Sample:  37%|###7      | 93/250 [00:08, 21.20it/s, step size=1.17e+00, acc. prob=0.866]    Sample:  38%|###8      | 96/250 [00:08, 20.66it/s, step size=1.17e+00, acc. prob=0.872]    Sample:  40%|###9      | 99/250 [00:08, 19.61it/s, step size=1.17e+00, acc. prob=0.872]    Sample:  41%|####      | 102/250 [00:08, 19.22it/s, step size=1.17e+00, acc. prob=0.875]    Sample:  42%|####1     | 104/250 [00:09, 17.33it/s, step size=1.17e+00, acc. prob=0.862]    Sample:  43%|####3     | 108/250 [00:09, 20.46it/s, step size=1.17e+00, acc. prob=0.871]    Sample:  44%|####4     | 111/250 [00:09, 19.71it/s, step size=1.17e+00, acc. prob=0.871]    Sample:  46%|####5     | 114/250 [00:09, 19.07it/s, step size=1.17e+00, acc. prob=0.874]    Sample:  46%|####6     | 116/250 [00:09, 19.12it/s, step size=1.17e+00, acc. prob=0.878]    Sample:  48%|####7     | 119/250 [00:09, 18.99it/s, step size=1.17e+00, acc. prob=0.879]    Sample:  48%|####8     | 121/250 [00:09, 17.66it/s, step size=1.17e+00, acc. prob=0.881]    Sample:  50%|####9     | 124/250 [00:10, 17.40it/s, step size=1.17e+00, acc. prob=0.879]    Sample:  50%|#####     | 126/250 [00:10, 16.03it/s, step size=1.17e+00, acc. prob=0.881]    Sample:  52%|#####1    | 129/250 [00:10, 18.93it/s, step size=1.17e+00, acc. prob=0.880]    Sample:  53%|#####2    | 132/250 [00:10, 20.46it/s, step size=1.17e+00, acc. prob=0.884]    Sample:  54%|#####4    | 135/250 [00:10, 17.54it/s, step size=1.17e+00, acc. prob=0.886]    Sample:  55%|#####5    | 138/250 [00:10, 17.68it/s, step size=1.17e+00, acc. prob=0.888]    Sample:  56%|#####6    | 140/250 [00:11, 16.49it/s, step size=1.17e+00, acc. prob=0.889]    Sample:  57%|#####7    | 143/250 [00:11, 18.65it/s, step size=1.17e+00, acc. prob=0.892]    Sample:  59%|#####9    | 148/250 [00:11, 21.97it/s, step size=1.17e+00, acc. prob=0.895]    Sample:  60%|######    | 151/250 [00:11, 20.99it/s, step size=1.17e+00, acc. prob=0.896]    Sample:  62%|######2   | 156/250 [00:11, 24.61it/s, step size=1.17e+00, acc. prob=0.894]    Sample:  64%|######3   | 159/250 [00:11, 20.92it/s, step size=1.17e+00, acc. prob=0.894]    Sample:  65%|######5   | 163/250 [00:11, 22.39it/s, step size=1.17e+00, acc. prob=0.898]    Sample:  66%|######6   | 166/250 [00:12, 20.92it/s, step size=1.17e+00, acc. prob=0.897]    Sample:  68%|######7   | 169/250 [00:12, 22.22it/s, step size=1.17e+00, acc. prob=0.895]    Sample:  69%|######8   | 172/250 [00:12, 20.47it/s, step size=1.17e+00, acc. prob=0.893]    Sample:  70%|#######   | 175/250 [00:12, 19.23it/s, step size=1.17e+00, acc. prob=0.894]    Sample:  71%|#######   | 177/250 [00:12, 17.92it/s, step size=1.17e+00, acc. prob=0.894]    Sample:  72%|#######1  | 179/250 [00:12, 16.99it/s, step size=1.17e+00, acc. prob=0.894]    Sample:  73%|#######3  | 183/250 [00:13, 20.41it/s, step size=1.17e+00, acc. prob=0.896]    Sample:  74%|#######4  | 186/250 [00:13, 19.82it/s, step size=1.17e+00, acc. prob=0.892]    Sample:  76%|#######5  | 189/250 [00:13, 20.73it/s, step size=1.17e+00, acc. prob=0.890]    Sample:  77%|#######6  | 192/250 [00:13, 21.85it/s, step size=1.17e+00, acc. prob=0.887]    Sample:  78%|#######8  | 195/250 [00:13, 22.31it/s, step size=1.17e+00, acc. prob=0.888]    Sample:  79%|#######9  | 198/250 [00:13, 19.04it/s, step size=1.17e+00, acc. prob=0.888]    Sample:  80%|########  | 201/250 [00:13, 17.68it/s, step size=1.17e+00, acc. prob=0.887]    Sample:  81%|########1 | 203/250 [00:14, 16.59it/s, step size=1.17e+00, acc. prob=0.888]    Sample:  82%|########2 | 205/250 [00:14, 15.55it/s, step size=1.17e+00, acc. prob=0.887]    Sample:  83%|########2 | 207/250 [00:14, 14.84it/s, step size=1.17e+00, acc. prob=0.887]    Sample:  84%|########4 | 210/250 [00:14, 17.24it/s, step size=1.17e+00, acc. prob=0.889]    Sample:  85%|########4 | 212/250 [00:14, 16.08it/s, step size=1.17e+00, acc. prob=0.886]    Sample:  87%|########6 | 217/250 [00:14, 20.67it/s, step size=1.17e+00, acc. prob=0.886]    Sample:  88%|########8 | 220/250 [00:15, 19.53it/s, step size=1.17e+00, acc. prob=0.888]    Sample:  89%|########8 | 222/250 [00:15, 17.84it/s, step size=1.17e+00, acc. prob=0.887]    Sample:  90%|######### | 225/250 [00:15, 19.71it/s, step size=1.17e+00, acc. prob=0.887]    Sample:  91%|#########1| 228/250 [00:15, 20.85it/s, step size=1.17e+00, acc. prob=0.888]    Sample:  92%|#########2| 231/250 [00:15, 20.09it/s, step size=1.17e+00, acc. prob=0.888]    Sample:  94%|#########3| 235/250 [00:15, 24.59it/s, step size=1.17e+00, acc. prob=0.886]    Sample:  96%|#########5| 239/250 [00:15, 26.30it/s, step size=1.17e+00, acc. prob=0.888]    Sample:  97%|#########6| 242/250 [00:15, 25.90it/s, step size=1.17e+00, acc. prob=0.887]    Sample:  98%|#########8| 246/250 [00:16, 27.27it/s, step size=1.17e+00, acc. prob=0.886]    Sample: 100%|#########9| 249/250 [00:16, 22.23it/s, step size=1.17e+00, acc. prob=0.886]    Sample: 100%|##########| 250/250 [00:16, 15.31it/s, step size=1.17e+00, acc. prob=0.886]





.. GENERATED FROM PYTHON SOURCE LINES 204-208

Posterior Predictive Checks
---------------------------
After obtaining the posterior samples, we perform posterior predictive checks.
This step is crucial to evaluate the performance and validity of our probabilistic model.

.. GENERATED FROM PYTHON SOURCE LINES 210-211

Sample from posterior predictive and visualize

.. GENERATED FROM PYTHON SOURCE LINES 211-218

.. code-block:: python3

    posterior_samples = mcmc.get_samples()
    posterior_predictive = Predictive(model, posterior_samples)(y_obs_list)
    data = az.from_pyro(posterior=mcmc, prior=prior, posterior_predictive=posterior_predictive)
    az.plot_trace(data)
    plt.show()





.. image-sg:: /examples_basic_geology/images/sphx_glr_2-thickness_problem_gempy_004.png
   :alt: $\mu_{top}$, $\mu_{top}$
   :srcset: /examples_basic_geology/images/sphx_glr_2-thickness_problem_gempy_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    /home/leguark/.virtualenvs/gempy-geotop-pilot/lib/python3.10/site-packages/pkg_resources/__init__.py:123: PkgResourcesDeprecationWarning: gempy.-version- is an invalid version and will not be supported in a future release
      warnings.warn(
    /home/leguark/.virtualenvs/gempy-geotop-pilot/lib/python3.10/site-packages/arviz/data/io_pyro.py:157: UserWarning: Could not get vectorized trace, log_likelihood group will be omitted. Check your model vectorization or set log_likelihood=False
      warnings.warn(




.. GENERATED FROM PYTHON SOURCE LINES 219-224

Density Plot of Posterior Predictive
------------------------------------
A density plot provides a visual representation of the distribution of the 
posterior predictive checks. It helps in comparing the prior and posterior distributions 
and in assessing the impact of our observed data on the model.

.. GENERATED FROM PYTHON SOURCE LINES 226-227

Plot density of posterior predictive and prior predictive

.. GENERATED FROM PYTHON SOURCE LINES 227-235

.. code-block:: python3

    az.plot_density(
        data=[data.posterior_predictive, data.prior_predictive],
        shade=.9,
        var_names=[r'$\mu_{thickness}$'],
        data_labels=["Posterior Predictive", "Prior Predictive"],
        colors=[default_red, default_blue],
    )
    plt.show()



.. image-sg:: /examples_basic_geology/images/sphx_glr_2-thickness_problem_gempy_005.png
   :alt: $\mu_{thickness}$
   :srcset: /examples_basic_geology/images/sphx_glr_2-thickness_problem_gempy_005.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  21.673 seconds)


.. _sphx_glr_download_examples_basic_geology_2-thickness_problem_gempy.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: 2-thickness_problem_gempy.py <2-thickness_problem_gempy.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: 2-thickness_problem_gempy.ipynb <2-thickness_problem_gempy.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
